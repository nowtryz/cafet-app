<?php
namespace cafetapi\data;

use cafetapi\io\ExpenseManager;

/**
 * The Expense object is the one that stores every expense's information for
 * later use, it's generaly generated by the Client's method
 * Client::getExpenses() or even directly whith the Data
 * Data::getClientExpenses().
 *
 * @author Damien
 * @see \cafetapi\io\DataFetcher::getClientExpenses()
 * @see Client::getExpenses()
 * @since API 0.1.0 (2018)
 */
class Expense extends JSONParsable implements Data
{
    private $id;
    private $client;
    private $date;
    private $total;
    private $balanceAfterTransaction;

    /**
     * The Expense object is the one that stores every expense's information for
     * later use, it's generaly generated by the Client's method
     * Client::getExpenses() or even directly whith the DataFetcher::getClientExpenses().
     *
     * @param int $id
     *            the id of the expense in the database
     * @param int $client_id
     *            the client wich performed this transaction
     * @param Calendar $date
     *            the date at wich the transaction has been completed
     * @param float $total
     *            the total price dued from the client
     * @param float $balanceAfterTransaction
     *            the balance of the clien after the transaction
     * @see \cafetapi\io\ExpenseManager::getClientExpenses()
     * @see Client::getExpenses()
     * @since API 0.1.0 (2018)
     */
    public function __construct(int $id, int $client_id, Calendar $date, float $total, float $balanceAfterTransaction)
    {
        $this->id = $id;
        $this->client = $client_id;
        $this->date = $date;
        $this->total = $total;
        $this->balanceAfterTransaction = $balanceAfterTransaction;
    }

    /**
     * Returns the $id
     *
     * @return mixed the $id
     * @since API 0.1.0 (2018)
     */
    public final function getId(): int
    {
        return $this->id;
    }

    /**
     * Returns the $client
     *
     * @return mixed the $client
     * @since API 0.1.0 (2018)
     */
    public final function getClient(): int
    {
        return $this->client;
    }

    /**
     * Returns the $date
     *
     * @return Calendar the $date
     * @since API 0.1.0 (2018)
     */
    public final function getDate(): Calendar
    {
        return $this->date;
    }

    /**
     * Returns the $total
     *
     * @return float the $total
     * @since API 0.1.0 (2018)
     */
    public final function getTotal(): float
    {
        return $this->total;
    }

    /**
     * Returns the $balanceAfterTransaction
     *
     * @return float the $balanceAfterTransaction
     * @since API 0.1.0 (2018)
     */
    public final function getBalanceAfterTransaction(): float
    {
        return $this->balanceAfterTransaction;
    }

    /**
     * Returns details of the expense
     *
     * @return array
     * @since API 0.1.0 (2018)
     */
    public final function getDetails(): array
    {
        return ExpenseManager::getInstance()->getExpenseDetails($this->id);
    }

    public function __toString(): string
    {
        return $this->parse_JSON(get_object_vars($this));
    }
    
    public function getProperties(): array
    {
        $vars = get_object_vars($this);
        $vars['date'] = $vars['date']->getProperties();
        
        return array_merge(['type' => get_simple_classname($this)], $vars);
    }
}

