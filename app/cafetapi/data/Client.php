<?php
namespace cafetapi\data;

use cafetapi;
use cafetapi\io\DataFetcher;

/**
 * The Client object is the wich stores every client information for later use
 *
 * @author Damien
 * @since API 1.0.0 (2018)
 *       
 */
class Client extends JSONParsable implements Data
{

    private $id;

    private $email;

    private $alias;

    private $familyNane;

    private $surname;

    private $member;

    private $balance;

    private $registrationYear;

    /**
     * The Client object is the wich stores every client information for later use,
     * it's generaly generated by a Data static method (such as
     * Data::getClient(int $id))
     *
     * @param int $id
     *            an integer, the ID of the client in the DataBase
     * @param string $email
     *            the email of the client
     * @param string $alias
     *            the username of the client
     * @param string $familyNane
     *            the familyname of the client
     * @param string $surname
     *            the surname of the client
     * @param bool $member
     *            a boolean that represents whether or not the client is a member of the association and can benefits for discounts
     * @param float $balance
     *            the actual balance of the client
     * @param int $registrationYear
     *            the year of the client's registration
     * @see \cafetapi\io\DataFetcher::getClient()
     * @since API 1.0.0 (2018)
     */
    public function __construct(int $id, string $email, string $alias, string $familyNane, string $surname, bool $member, float $balance, int $registrationYear)
    {
        $this->id = $id;
        $this->email = $email;
        $this->alias = $alias;
        $this->familyNane = $familyNane;
        $this->surname = $surname;
        $this->member = $member;
        $this->balance = $balance;
        $this->registrationYear = $registrationYear;
    }

    /**
     * Return the id
     *
     * @return int the id
     * @since API 1.0.0 (2018)
     */
    public final function getId(): int
    {
        return $this->id;
    }

    /**
     * Return the email
     *
     * @return string the email
     * @since API 1.0.0 (2018)
     */
    public final function getEmail(): string
    {
        return $this->email;
    }

    /**
     * Return the alias
     *
     * @return string the alias
     * @since API 1.0.0 (2018)
     */
    public final function getAlias(): string
    {
        return $this->alias;
    }

    /**
     * Return the family name
     *
     * @return string the family name
     * @since API 1.0.0 (2018)
     */
    public final function getFamilyNane(): string
    {
        return $this->familyNane;
    }

    /**
     * Return the surname
     *
     * @return string the surname
     * @since API 1.0.0 (2018)
     */
    public final function getSurname(): string
    {
        return $this->surname;
    }

    /**
     * Return is the client is a member
     *
     * @return bool is member
     * @since API 1.0.0 (2018)
     */
    public final function isMember(): bool
    {
        return $this->member;
    }

    /**
     * Return the balance
     *
     * @return float the balance
     * @since API 1.0.0 (2018)
     */
    public final function getBalance(): float
    {
        return $this->balance;
    }

    /**
     * Return the registration yean
     *
     * @return int the registration year
     * @since API 1.0.0 (2018)
     */
    public final function getRegistrationYear(): int
    {
        return $this->registrationYear;
    }

    /**
     * Return a list of client's expenses
     *
     * @return array a list of client's expenses
     * @since API 1.0.0 (2018)
     */
    public final function getExpenses(): array
    {
        return (new DataFetcher())->getClientExpenses($this->id);
    }

    /**
     * Return a list of latest client's expenses
     *
     * @return array a list of client's expenses
     * @since API 1.0.0 (2018)
     */
    public final function getLastExpenses(): array
    {
        return (new DataFetcher())->getClientLastExpenses($this->id);
    }

    /**
     * Return a list of latest client's reloads
     *
     * @return array a list of client's reloads
     * @since API 1.0.0 (2018)
     */
    public final function getReloads(): array
    {
        return (new DataFetcher())->getClientReloads($this - id);
    }

    /**
     * Returns the name like Suname NAME
     *
     * @return string the formated name
     * @since API 1.0.0 (2018)
     */
    public final function getFormatedName(): string
    {
        return capitalize_first_letter($this->surname) . ' ' . strtoupper($this->familyNane);
    }

    public function __toString(): string
    {
        return $this->parse_JSON(get_object_vars($this));
    }
    
    public function getProperties(): array
    {
        return array_merge(array('type' => get_simple_classname($this)), get_object_vars($this));
    }
}

