stages:
  - build
  - docker
  - test
  - deploy

variables:
  SERVER_IMAGE: $CI_REGISTRY_IMAGE/server
  DATABASE_IMAGE: $CI_REGISTRY_IMAGE/database
  IMAGE_ID: ${CI_COMMIT_REF_NAME}_${CI_COMMIT_SHORT_SHA}


default:
  image: alpine
  before_script:
    - date

.with-cache: &with-cache
  cache:
    key: "$CI_JOB_NAME-$CI_COMMIT_REF_SLUG"
    paths:
      # Node JS
      - ./node_modules

# Linux docker container runner
.linux-docker-runner-template: &linux-docker-runner
  tags:
    - linux
    - docker

# Jobs that require login
.docker_job: &docker
  <<: *linux-docker-runner
  image: docker:19
  services:
    - docker:dind
  before_script:
    - date
    - docker login -u gitlab-ci-token -p $CI_JOB_TOKEN $CI_REGISTRY

# Tag docker images
.docker_tagging: &docker-tagging
  <<: *docker
  script:
    - >
      function push_image_to_gitlab() {
        # push_image_to_gitlab IMAGE SHA TAG
        local image=$1 sha=$2 tag=$3;
        docker pull $image:$sha;
        docker tag $image:$sha $image:$tag;
        docker push $image:$tag;
      }
    - push_image_to_gitlab $DATABASE_IMAGE $IMAGE_ID $NEW_TAG;
    - push_image_to_gitlab $SERVER_IMAGE $IMAGE_ID $NEW_TAG;


## ##
## Build
## ##

build:documentation:
  <<: *linux-docker-runner
  <<: *with-cache
  image: node:10
  stage: build
  script:
    - npm install
    - npm run api:doc
    - cp openapi.yml doc/
  artifacts:
    untracked: true
    paths:
      # Built documentation
      - ./doc
    expire_in: 1 hour

build:docker:
  <<: *docker
  stage: build
  script:
    # fetches the latest image (not failing if image is not found)
    - docker pull $SERVER_IMAGE:latest || true
    - docker build --pull --cache-from $SERVER_IMAGE:latest -t $SERVER_IMAGE:$IMAGE_ID -f docker/php/Dockerfile .
    - docker build --pull --cache-from $DATABASE_IMAGE:latest -t $DATABASE_IMAGE:$IMAGE_ID -f docker/mysql/Dockerfile .
    - docker push $SERVER_IMAGE:$IMAGE_ID
    - docker push $DATABASE_IMAGE:$IMAGE_ID

## ##
## Docker
## ##

## Docker tags
docker:branches:
  <<: *docker-tagging
  stage: docker
  variables:
    GIT_STRATEGY: none
    NEW_TAG: $CI_COMMIT_REF_NAME
  only:
    - branches
    - tags
  except:
    refs:
      - master
      - develop
    variables:
      - $CI_COMMIT_TAG =~ /^v/
  dependencies:
    - build:docker

docker:tags:
  <<: *docker-tagging
  stage: docker
  variables:
    GIT_STRATEGY: none
    NEW_TAG: $(echo $CI_COMMIT_TAG | sed -E "s/^v//")
  only:
    refs:
      - tags
    variables:
      - $CI_COMMIT_TAG =~ /^v/
  dependencies:
    - build:docker

docker:release:
  <<: *docker-tagging
  stage: docker
  variables:
    GIT_STRATEGY: none
    NEW_TAG: latest
  only:
    - master
  except:
    - tags
  dependencies:
    - build:docker

docker:develop:
  <<: *docker-tagging
  stage: docker
  variables:
    GIT_STRATEGY: none
    NEW_TAG: dev
  only:
    - develop
  except:
    - tags
  dependencies:
    - build:docker


## ##
## Deploy
## ##

## Artifacts

# Artifact publish templates
.publish-artifact-template: &publish-artifact
  name: application
  paths:
    - app/
.publish-template: &publish
  <<: *linux-docker-runner
  stage: deploy
  script: date

# Artifact publish
deploy:dev_app:
  <<: *publish
  except:
    - tags
  artifacts:
    <<: *publish-artifact
    expire_in: 1 day

deploy:app:
  <<: *publish
  only:
    - tags
  artifacts: *publish-artifact


# db structure templates
.db-struct-artifact-template: &db-struct-artifact
  name: database structure
  paths:
    - ./*.sql
.db-struct-template: &db-struct
  <<: *linux-docker-runner
  stage: deploy
  script:
    - cp docker/mysql/structure.sql .
    - cp docker/mysql/demo.sql .

# Artifact publish
deploy:dev_database_structure:
  <<: *db-struct
  except:
    - tags
  artifacts:
    <<: *db-struct-artifact
    expire_in: 1 day

deploy:database_structure:
  <<: *db-struct
  only:
    - tags
  artifacts: *db-struct-artifact


pages:
  <<: *linux-docker-runner
  stage: deploy
  dependencies:
    - build:documentation
  script:
    - mv doc public
  artifacts:
    paths:
      - public
    expire_in: 5 mins
