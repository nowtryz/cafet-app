stages:
  - build
  - test
  - deploy

variables:
  SERVER_IMAGE: $CI_REGISTRY_IMAGE/server
  DATABASE_IMAGE: $CI_REGISTRY_IMAGE/database
  IMAGE_TAG: ${CI_COMMIT_REF_NAME}_${CI_COMMIT_SHORT_SHA}

# Cache policy
cache:
  key: "$CI_COMMIT_REF_SLUG"
  paths:
    # Actual build
    - ./doc
    # Node JS
    - ./node_modules

default:
  image: alpine

# Jobs that does not require git to pull code
.no-pull: &no-pull
  variables:
      GIT_STRATEGY: none

# Linux docker container runner
.linux-docker-runner-template: &linux-docker-runner
  tags:
    - linux
    - docker

# Jobs that require login
.docker_job: &docker
  <<: *linux-docker-runner
  image: docker:19
  services:
    - docker:dind
  before_script:
    - docker login -u gitlab-ci-token -p $CI_JOB_TOKEN $CI_REGISTRY
    # fetches the latest image (not failing if image is not found)
    - docker pull $SERVER_IMAGE:latest || true


## ##
## Build
## ##

build:docker:
  <<: *docker
  stage: build
  script:
    - docker build --pull --cache-from $SERVER_IMAGE:latest -t $SERVER_IMAGE:$IMAGE_TAG -f docker/php/Dockerfile .
    - docker build --pull --cache-from $DATABASE_IMAGE:latest -t $DATABASE_IMAGE:$IMAGE_TAG -f docker/mysql/Dockerfile .
    - docker push $SERVER_IMAGE:$IMAGE_TAG
    - docker push $DATABASE_IMAGE:$IMAGE_TAG

build:documentation:
  <<: *linux-docker-runner
  image: node
  stage: build
  script:
    - npm install
    - npm run api:doc
    - cp openapi.yml doc/


## ##
## Deploy
## ##

## Docker tags

deploy:tags:
  <<: *docker
  <<: *no-pull
  stage: deploy
  script:
    - docker pull $SERVER_IMAGE:$IMAGE_TAG
    - docker pull $DATABASE_IMAGE:$IMAGE_TAG
    - docker tag $SERVER_IMAGE:$IMAGE_TAG $SERVER_IMAGE:$CI_COMMIT_REF_NAME
    - docker tag $DATABASE_IMAGE:$IMAGE_TAG $DATABASE_IMAGE:$CI_COMMIT_REF_NAME
    - docker push $SERVER_IMAGE:$CI_COMMIT_REF_NAME
    - docker push $DATABASE_IMAGE:$CI_COMMIT_REF_NAME
  only:
    - tags
  dependencies:
    - build:docker

deploy:release:
  <<: *docker
  <<: *no-pull
  stage: deploy
  script:
    - docker pull $SERVER_IMAGE:$IMAGE_TAG
    - docker pull $DATABASE_IMAGE:$IMAGE_TAG
    - docker tag $SERVER_IMAGE:$IMAGE_TAG $SERVER_IMAGE:latest
    - docker tag $DATABASE_IMAGE:$IMAGE_TAG $DATABASE_IMAGE:latest
    - docker push $SERVER_IMAGE:latest
    - docker push $DATABASE_IMAGE:latest
  only:
    - master
  dependencies:
    - build:docker

deploy:develop:
  <<: *docker
  <<: *no-pull
  stage: deploy
  script:
    - docker pull $SERVER_IMAGE:$IMAGE_TAG
    - docker pull $DATABASE_IMAGE:$IMAGE_TAG
    - docker tag $SERVER_IMAGE:$IMAGE_TAG $SERVER_IMAGE:dev
    - docker tag $DATABASE_IMAGE:$IMAGE_TAG $DATABASE_IMAGE:dev
    - docker push $SERVER_IMAGE:dev
    - docker push $DATABASE_IMAGE:dev
  only:
    - develop
  dependencies:
    - build:docker

## Artifacts

# Artifact publish templates
.publish-artifact-template: &publish-artifact
  name: application
  paths:
    - app/
.publish-template: &publish
  <<: *linux-docker-runner
  stage: deploy
  script: date

# Artifact publish
deploy:dev_app:
  <<: *publish
  except:
    - tags
  artifacts:
    <<: *publish-artifact
    expire_in: 1 day

deploy:app:
  <<: *publish
  only:
    - tags
  artifacts: *publish-artifact


# db structure templates
.db-struct-artifact-template: &db-struct-artifact
  name: database structure
  paths:
    - ./*.sql
.db-struct-template: &db-struct
  <<: *linux-docker-runner
  stage: deploy
  script:
    - cp docker/mysql/structure.sql .
    - cp docker/mysql/demo.sql .

# Artifact publish
deploy:dev_database_structure:
  <<: *db-struct
  except:
    - tags
  artifacts:
    <<: *db-struct-artifact
    expire_in: 1 day

deploy:database_structure:
  <<: *db-struct
  only:
    - tags
  artifacts: *db-struct-artifact


pages:
  <<: *linux-docker-runner
  stage: deploy
  dependencies:
    - build:documentation
  script: mv doc public
  artifacts:
    paths:
      - public
    expire_in: 20 mins