stages:
  - build
  - docker
  - test
  - deploy

variables:
  SERVER_IMAGE: "$CI_REGISTRY_IMAGE/server"
  DATABASE_IMAGE: "$CI_REGISTRY_IMAGE/database"
  IMAGE_ID: ${CI_COMMIT_REF_NAME}_${CI_COMMIT_SHORT_SHA}


default:
  image: alpine
  before_script:
    - date

.with-cache: &with-cache
  cache:
    key: "$CI_JOB_NAME-$CI_COMMIT_REF_SLUG"
    paths:
      # Node JS
      - ./node_modules

# Linux docker container runner
.linux-docker-runner-template: &linux-docker-runner
  tags:
    - linux
    - docker

# Jobs that require login
.docker_job: &docker
  <<: *linux-docker-runner
  image: docker:19
  services:
    - docker:dind
  before_script:
    - date
    - docker login -u gitlab-ci-token -p $CI_JOB_TOKEN $CI_REGISTRY

# Only policies
.only_master: &only-master
  only:
    - master
  except:
    - tags

.only_dev: &only-dev
  only:
    - develop
  except:
    - tags

.only_versions: &only-versions
  only:
    refs:
      - tags
    variables:
      - $CI_COMMIT_TAG =~ /^v/

.only_others: &only_others
  only:
    - branches
    - tags
  except:
    refs:
      - master
      - develop
    variables:
      - $CI_COMMIT_TAG =~ /^v/


## ##
## Build
## ##

build:documentation:
  <<: *linux-docker-runner
  <<: *with-cache
  image: node:10
  stage: build
  script:
    - yarn install
    - yarn api:doc
    - cp openapi.yml doc/
  only:
    - master
  artifacts:
    untracked: true
    paths:
      # Built documentation
      - ./doc
    expire_in: 1 hour

build:docker 1 2:
  <<: *docker
  stage: build
  script:
    # fetches the latest image (not failing if image is not found)
    - docker pull "$SERVER_IMAGE:latest" || true
    - docker build --pull --cache-from "$SERVER_IMAGE:latest" -t "$SERVER_IMAGE:${IMAGE_ID//\//-}" -f docker/php/Dockerfile .
    - docker push "$SERVER_IMAGE:${IMAGE_ID//\//-}"

build:docker 2 2:
  <<: *docker
  stage: build
  script:
    # fetches the latest image (not failing if image is not found)
    - docker pull $DATABASE_IMAGE:latest || true
    - docker build --pull --cache-from $DATABASE_IMAGE:latest -t $DATABASE_IMAGE:${IMAGE_ID//\//-} -f docker/mysql/Dockerfile .
    - docker push $DATABASE_IMAGE:${IMAGE_ID//\//-}

## ##
## Docker
## ##

## Docker tags
.docker_tagging: &docker-tagging
  <<: *docker
  stage: docker
  script:
    - alias ee="eval echo"
    - echo $(ee $IMAGE:${IMAGE_ID//\//-})
    - docker pull $(ee $IMAGE:${IMAGE_ID//\//-})
    - docker tag $(ee $IMAGE:${IMAGE_ID//\//-}) $(ee $IMAGE:${NEW_TAG//\//-})
    - docker push $(ee $IMAGE:${NEW_TAG//\//-})

docker:branches 1 2:
  <<: *docker-tagging
  <<: *only_others
  variables:
    GIT_STRATEGY: none
    IMAGE: "$SERVER_IMAGE"
    NEW_TAG: $CI_COMMIT_REF_NAME
  dependencies:
    - build:docker 1 2

docker:branches 2 2:
  <<: *docker-tagging
  <<: *only_others
  variables:
    GIT_STRATEGY: none
    IMAGE: "$DATABASE_IMAGE"
    NEW_TAG: $CI_COMMIT_REF_NAME
  dependencies:
    - build:docker 2 2

docker:tags 1 2:
  <<: *docker-tagging
  <<: *only-versions
  variables:
    GIT_STRATEGY: none
    IMAGE: "$SERVER_IMAGE"
    NEW_TAG: $(echo $CI_COMMIT_TAG | sed -E "s/^v//")
  dependencies:
    - build:docker 1 2

docker:tags 2 2:
  <<: *docker-tagging
  <<: *only-versions
  variables:
    GIT_STRATEGY: none
    IMAGE: "$DATABASE_IMAGE"
    NEW_TAG: $(echo $CI_COMMIT_TAG | sed -E "s/^v//")
  dependencies:
    - build:docker 2 2

docker:release 1 2:
  <<: *docker-tagging
  <<: *only-master
  variables:
    GIT_STRATEGY: none
    IMAGE: "$SERVER_IMAGE"
    NEW_TAG: "latest"
  dependencies:
    - build:docker 1 2

docker:release 2 2:
  <<: *docker-tagging
  <<: *only-master
  variables:
    GIT_STRATEGY: none
    IMAGE: "$DATABASE_IMAGE"
    NEW_TAG: "latest"
  dependencies:
    - build:docker 2 2

docker:develop 1 2:
  <<: *docker-tagging
  <<: *only-dev
  variables:
    GIT_STRATEGY: none
    IMAGE: "$SERVER_IMAGE"
    NEW_TAG: "dev"
  dependencies:
    - build:docker 1 2

docker:develop 2 2:
  <<: *docker-tagging
  <<: *only-dev
  variables:
    GIT_STRATEGY: none
    IMAGE: "$DATABASE_IMAGE"
    NEW_TAG: "dev"
  dependencies:
    - build:docker 2 2


## ##
## Deploy
## ##

## Artifacts

# Artifact publish templates
.publish-artifact-template: &publish-artifact
  name: application
  paths:
    - app/
.publish-template: &publish
  <<: *linux-docker-runner
  stage: deploy
  script: date

# Artifact publish
deploy:dev_app:
  <<: *publish
  except:
    - tags
  artifacts:
    <<: *publish-artifact
    expire_in: 1 day

deploy:app:
  <<: *publish
  only:
    - tags
  artifacts: *publish-artifact


# db structure templates
.db-struct-artifact-template: &db-struct-artifact
  name: database structure
  paths:
    - ./*.sql
.db-struct-template: &db-struct
  <<: *linux-docker-runner
  stage: deploy
  script:
    - cp docker/mysql/structure.sql .
    - cp docker/mysql/demo.sql .

# Artifact publish
deploy:dev_database_structure:
  <<: *db-struct
  except:
    - tags
  artifacts:
    <<: *db-struct-artifact
    expire_in: 1 day

deploy:database_structure:
  <<: *db-struct
  only:
    - tags
  artifacts: *db-struct-artifact


pages:
  <<: *linux-docker-runner
  stage: deploy
  dependencies:
    - build:documentation
  script:
    - mv doc public
  artifacts:
    paths:
      - public
    expire_in: 5 mins
